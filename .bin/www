var app = require('../app');
var debug = require('debug')('phishsense:server');
var http = require('http');
var fs = require('fs');
var https = require('https');

function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) return val;
    if (port >= 0) return port;
    return false;  
}

function onError(error) {
    if (error.syscall !== 'listen') throw error;
    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

var port = normalizePort(process.env.PORT || '8080');
var https_port = process.env.PORT_HTTPS || 8443;

if (process.env.ENV !== "DEV") {
    try {
        var privatekey = fs.readFileSync('privatekey.pem', "utf8").trim();
        var cert = fs.readFileSync('server.crt', "utf8").trim();

        if (!privatekey.includes("BEGIN PRIVATE KEY") || !cert.includes("BEGIN CERTIFICATE")) {
            throw new Error("Invalid SSL key or certificate format.");
        }

        var options = {
            key: privatekey,
            cert: cert
        };

        app.set("port", https_port);

        var server = https.createServer(options, app).listen(https_port, function () {
            console.log('HTTPS Server running on port ' + https_port);
        });

        server.on('error', onError);
        server.on('listening', onListening);

        http.createServer(function (req, res) {
            res.writeHead(301, { "Location": "https://" + req.headers['host'].replace(port, https_port) + req.url });
            res.end();
        }).listen(port);
    } catch (error) {
        console.error("Error setting up HTTPS server:", error.message);
        process.exit(1);
    }
} else {
    var server = http.createServer(app);
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
}
